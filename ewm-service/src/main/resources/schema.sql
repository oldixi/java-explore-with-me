DROP TABLE IF EXISTS users, categories, locations, events,
requests, compilations, compilations_events, places CASCADE;

drop function getEventsByPlaceName(placeName varchar, from_record int, page_size int);
drop function getEventsByPlaceId(placeId int, from_record int, page_size int);

CREATE TABLE IF NOT EXISTS users (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(512) NOT NULL,
  CONSTRAINT pk_users PRIMARY KEY (id),
  CONSTRAINT uq_users_email UNIQUE (email),
  CONSTRAINT uq_users_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS categories (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(256) NOT NULL,
  CONSTRAINT pk_categories PRIMARY KEY (id),
  CONSTRAINT uq_categories_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS locations (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  lat FLOAT,
  lon FLOAT,
  CONSTRAINT pk_locations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(256) NOT NULL,
  pinned BOOLEAN,
  CONSTRAINT pk_compilations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(120),
  annotation VARCHAR(2000),
  description VARCHAR(7000),
  event_date TIMESTAMP WITHOUT TIME ZONE,
  created_on TIMESTAMP WITHOUT TIME ZONE,
  published_on TIMESTAMP WITHOUT TIME ZONE,
  confirmed_requests INTEGER,
  participant_limit INTEGER,
  views INTEGER,
  paid BOOLEAN,
  request_moderation BOOLEAN,
  state VARCHAR(50),
  category_id INTEGER,
  initiator_id INTEGER,
  location_id INTEGER,
  CONSTRAINT pk_events PRIMARY KEY (id),
  CONSTRAINT fk_events_to_categories FOREIGN KEY (category_id) REFERENCES categories(id),
  CONSTRAINT fk_events_to_users FOREIGN KEY (initiator_id) REFERENCES users(id),
  CONSTRAINT fk_events_to_locations FOREIGN KEY (location_id) REFERENCES locations(id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  compilation_id INTEGER NOT NULL,
  event_id INTEGER NOT NULL,
  CONSTRAINT fk_compilations_events_to_events FOREIGN KEY (event_id) REFERENCES events(id),
  CONSTRAINT fk_compilations_events_to_compilations FOREIGN KEY (compilation_id) REFERENCES compilations(id)
);

CREATE TABLE IF NOT EXISTS requests (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  status VARCHAR(50),
  created TIMESTAMP WITHOUT TIME ZONE,
  event_id INTEGER,
  requester_id INTEGER,
  CONSTRAINT pk_requests PRIMARY KEY (id),
  CONSTRAINT fk_requests_to_events FOREIGN KEY (event_id) REFERENCES events(id),
  CONSTRAINT fk_requests_to_users FOREIGN KEY (requester_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS places (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  lat FLOAT NOT NULL,
  lon FLOAT NOT NULL,
  radius FLOAT NOT NULL,
  name VARCHAR(256) NOT NULL,
  CONSTRAINT pk_places PRIMARY KEY (id),
  CONSTRAINT uq_places_name UNIQUE (name)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;

create or replace function getEventsByPlaceId(placeId integer, from_record int, page_size int)
    returns table(id INTEGER,
        		  annotation VARCHAR(2000),
				  confirmed_requests INTEGER,
				  created_on TIMESTAMP WITHOUT TIME ZONE,
				  description VARCHAR(7000),
				  event_date TIMESTAMP WITHOUT TIME ZONE,
			      location_id INTEGER,
				  paid BOOLEAN,
				  participant_limit INTEGER,
				  published_on TIMESTAMP WITHOUT TIME ZONE,
				  request_moderation BOOLEAN,
				  state VARCHAR(50),
				  title VARCHAR(120),
				  views INTEGER,
				  lat FLOAT,
				  lon FLOAT,
				  user_id INTEGER,
				  user_name VARCHAR,
				  category_id INTEGER,
				  category_name VARCHAR
				  )
as
'
begin
   return query
   		 select e.id,
        		e.annotation,
				e.confirmed_requests,
				e.created_on,
				e.description,
				e.event_date,
				e.location_id,
				e.paid,
				e.participant_limit,
				e.published_on,
				e.request_moderation,
				e.state,
				e.title,
				e.views,
				l.lat,
                l.lon,
                u.id user_id,
                u.name user_name,
                c.id category_id,
                c.name category_name
		from places p,
     		 locations l
        join events e on e.location_id = l.id
        join users u on e.initiator_id = u.id
        join categories c on e.category_id = c.id
		where distance(l.lat, l.lon, p.lat, p.lon) < p.radius
  		  and p.id = placeId
  		order by e.event_date
        limit page_size offset from_record;
end '
language plpgsql;

create or replace function getEventsByPlaceName(placeName varchar, from_record int, page_size int)
    returns table(id INTEGER,
        		  annotation VARCHAR(2000),
				  confirmed_requests INTEGER,
				  created_on TIMESTAMP WITHOUT TIME ZONE,
				  description VARCHAR(7000),
				  event_date TIMESTAMP WITHOUT TIME ZONE,
			      location_id INTEGER,
				  paid BOOLEAN,
				  participant_limit INTEGER,
				  published_on TIMESTAMP WITHOUT TIME ZONE,
				  request_moderation BOOLEAN,
				  state VARCHAR(50),
				  title VARCHAR(120),
				  views INTEGER,
				  lat FLOAT,
				  lon FLOAT,
				  user_id INTEGER,
				  user_name VARCHAR,
				  category_id INTEGER,
				  category_name VARCHAR
				  )
as
'
begin
   return query
   		 select e.id,
        		e.annotation,
				e.confirmed_requests,
				e.created_on,
				e.description,
				e.event_date,
				e.location_id,
				e.paid,
				e.participant_limit,
				e.published_on,
				e.request_moderation,
				e.state,
				e.title,
				e.views,
				l.lat,
                l.lon,
                u.id user_id,
                u.name user_name,
                c.id category_id,
                c.name category_name
		from places p,
     		 locations l
     	join events e on e.location_id = l.id
        join users u on e.initiator_id = u.id
        join categories c on e.category_id = c.id
		where distance(l.lat, l.lon, p.lat, p.lon) < p.radius
  		  and p.name = placeName
  		order by e.event_date
  		limit page_size offset from_record;
end '
language plpgsql;